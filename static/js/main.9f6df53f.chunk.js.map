{"version":3,"sources":["Form/index.js","Tasks/index.js","Header/index.js","Buttons/index.js","Section/index.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","value","onChange","target","type","autoFocus","placeholder","id","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","done","onClick","content","Header","title","Buttons","toggleHideDone","setAllTasksDone","length","disabled","every","Section","body","extraHeaderContent","Container","children","App","setHideDone","setTasks","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f6df53f.chunk.js","sourcesContent":["import \"./style.css\";\r\nimport { useState } from \"react\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (newTaskContent !== \"\") {\r\n            addNewTask(newTaskContent.trim());\r\n            setNewTaskContent(\"\");\r\n        } else\r\n            return null;\r\n\r\n    };\r\n\r\n    return <form className=\"form\" onSubmit={onFormSubmit}>\r\n        <input\r\n            value={newTaskContent}\r\n            onChange={({ target }) => setNewTaskContent(target.value)}\r\n            type=\"text\" className=\"form__input\" autoFocus placeholder=\"Co jest do zrobienia?\" />\r\n        <button id=\"submit\" className=\"form__button\">Dodaj zadanie</button>\r\n    </form>\r\n};\r\n\r\nexport default Form;","import \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <ul className=\"list\">\r\n        {tasks.map(task => (\r\n            <li key={task.id} className={`list__item ${task.done && hideDone ? \"list__item--hidden\" : \"\"}`}>\r\n                <button\r\n                    onClick={() => toggleTaskDone(task.id)}\r\n                    className=\"list__button list__button--done\">\r\n                    {task.done ? \"âœ“\" : \"\"}\r\n                </button>\r\n                <span className={`${task.done ? \" list__item--done\" : \"\"}`}>\r\n                    {task.content}\r\n                </span>\r\n                <button\r\n                    onClick={() => removeTask(task.id)}\r\n                    className=\"list__button list__button--remove\">\r\n                    ðŸ—‘\r\n                </button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n)\r\n\r\nexport default Tasks;","import \"./style.css\"\r\n\r\nconst Header = ({ title }) => (\r\n    <header>\r\n        <h1 className=\"main__header\">{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllTasksDone }) => (\r\n    tasks.length > 0 && (\r\n        <div className=\"buttons\">\r\n            <button\r\n                onClick={toggleHideDone}\r\n                className=\"buttons__button\"\r\n            >\r\n                {hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n            </button>\r\n            <button\r\n                onClick={setAllTasksDone}\r\n                className=\"buttons__button\" disabled={tasks.every(({ done }) => done) ? \"disabled\" : \"\"}>\r\n                UkoÅ„cz wszystkie\r\n            </button>\r\n        </div>\r\n    )\r\n);\r\n\r\nexport default Buttons;","import \"./style.css\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <section className=\"section\">\r\n        <header className=\"section__header\">\r\n            <h2 className=\"section__subHeader\">{title}</h2>\r\n            {extraHeaderContent}\r\n        </header>\r\n        {body}\r\n    </section>\r\n);\r\n\r\nexport default Section;","import \"./style.css\"\r\n\r\nconst Container = ({ children }) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Header from \"./Header\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Container from \"./Container\";\nimport { useState } from \"react\";\n\n\nfunction App() {\n\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState([]);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n\n      return task;\n    }))\n  };\n\n  const setAllTasksDone = () => {\n    setTasks(tasks => tasks.map(task => ({ ...task, done: true })));\n  };\n\n  const addNewTask = (content) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        content: content,\n        done: false,\n        id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1,\n      },\n    ])\n  };\n\n  return (\n    <Container>\n      <Header title=\"Lista zadaÅ„\" />\n\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form addNewTask={addNewTask} />}\n      />\n\n      <Section\n        title=\"Lista zadaÅ„\"\n        body={<Tasks tasks={tasks} hideDone={hideDone} removeTask={removeTask} toggleTaskDone={toggleTaskDone} />}\n        extraHeaderContent={<Buttons tasks={tasks} hideDone={hideDone} toggleHideDone={toggleHideDone} setAllTasksDone={setAllTasksDone} />}\n      />\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}